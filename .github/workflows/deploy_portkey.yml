name: Deploy Portkey to CF Worker
# Trigger the workflow on pushes to staging/main branches when worker code changes
# or manually via workflow_dispatch with optional parameters
on:
  push:
    branches:
      - staging
      - main
    paths:
      - "workers/portkey-service/**" # Only run when portkey code changes

  workflow_dispatch:
    inputs:
      force_deploy:
        description: Force deploy portkey
        required: false
        default: false
        type: boolean

jobs:
  scan-for-changes:
    name: Scan for portkey code changes
    runs-on: ubuntu-latest
    outputs:
      worker-dirs: ${{ steps.changed-workers.outputs.worker-dirs }} # Output the list of workers to deploy
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full git history needed to detect changes
      - name: Determine changed workers
        id: changed-workers
        run: |
          # Define all worker directories
          ALL_WORKER_DIRS='["portkey-service"]'

          # Case 1: Manual trigger with force_deploy=true - deploy all workers
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.force_deploy }}" == "true" ]]; then
            echo "Force deploying all workers"
            WORKER_DIRS="$ALL_WORKER_DIRS"


          # Case 2: Automatic detection based on git changes
          else
            # Get list of files changed in this push
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})

            # If shared code changed, deploy all workers since they might depend on it
            if echo "$CHANGED_FILES" | grep -q "^shared/"; then
              echo "Changes detected in shared directory, deploying all workers"
              WORKER_DIRS="$ALL_WORKER_DIRS"
            else
              # Otherwise, only deploy workers with direct changes
              WORKER_CHANGES=$(echo "$CHANGED_FILES" | grep "^workers/" || true)
              if [[ -z "$WORKER_CHANGES" ]]; then
                echo "No worker changes detected"
                echo "worker-dirs=[]" >> $GITHUB_OUTPUT
                exit 0
              fi

              # Extract unique worker directory names and format as JSON array
              WORKER_DIRS=$(echo "$WORKER_CHANGES" | grep -o "workers/[^/]*" | cut -d'/' -f2 | sort | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))')
            fi
          fi

          # Set output variable and log results
          echo "worker-dirs=$WORKER_DIRS" >> $GITHUB_OUTPUT
          echo "Changed worker directories: $WORKER_DIRS"

  deploy:
    name: "Deploy worker to ${{  github.ref_name == 'main' && 'production' || github.ref_name }} (${{ matrix.worker-dir }})"
    needs: scan-for-changes
    if: "${{ needs.scan-for-changes.outputs.worker-dirs != '[]' }}"
    runs-on: ubuntu-latest
    environment: "${{  github.ref_name == 'main' && 'production' || github.ref_name }}
    timeout-minutes: 60 # Set timeout to prevent hung deployments
    steps:
      - name: Checkout Portkey Gateway
        uses: actions/checkout@v4.2.2
        with:
          repository: Portkey-AI/gateway
          path: workers/portkey-service

      - name: Checkout Worker Code
        uses: actions/checkout@v4.2.2
        with:
          path: workers/portkey-service
          force: true  # This ensures our code overwrites the gateway code
      
      - uses: pnpm/action-setup@v4.1.0
        with:
          version: 10.5.2

      - name: Deploy with Wrangler CLI
        if: "steps.check-changes.outputs.has_changes == 'true'"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |-
          ENV_NAME="${{ github.ref_name == 'main' && 'production' || github.ref_name }}"

          # Deploy the worker
          npm install
          npx wrangler deploy --env $ENV_NAME --config ./wrangler.jsonc


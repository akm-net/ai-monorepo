name: Share GH Secrets Via Tele
# Trigger the workflow on pushes to staging/main branches when worker code changes
# or manually via workflow_dispatch with optional parameters
on:
  workflow_dispatch:
    inputs:
      tele_username:
        description: Enter the Telegram username to send to. Make sure the username is correct.
        required: true
        default: false
        type: string

# Set all the neccessary secrets in Github
env:
  AGENT_SECRET_NAMES: AGENT_CF_ACCESS_CLIENT_ID,AGENT_CF_ACCESS_CLIENT_SECRET,ENVIRONMENT,PORTKEY_ENDPOINT,OPENAI_API_KEY,GROQ_API_KEY,AGENT_GOOGLE_CLIENT_ID,AGENT_GOOGLE_CLIENT_SECRET,VERTEX_PROJECT_ID,VERTEX_REGION,LANGFUSE_SECRET_KEY,LANGFUSE_PUBLIC_KEY,LANGFUSE_HOST
  API_ENTRYPOINT_SECRET_NAMES: ENVIRONMENT
  EMBEDDER_SECRET_NAMES: ENVIRONMENT
  SCREENSHOT_SECRET_NAMES: SCREENSHOT_API_DOMAIN,ENVIRONMENT
  SEARCH_SECRET_NAMES: SERPER_API_KEY,ENVIRONMENT
  URLSCAN_SECRET_NAMES: URLSCAN_HOSTNAME,URLSCAN_APIKEY,ENVIRONMENT
  SCREENSHOT_BACKUP_SECRET_NAMES: SCREENSHOT_BACKUP_GOOGLE_CLIENT_ID,SCREENSHOT_BACKUP_GOOGLE_CLIENT_SECRET,SCREENSHOT_BACKUP_API_ENDPOINT,ENVIRONMENT
  TRIVIALFILTER_SECRET_NAMES: TRIVIALFILTER_CF_ACCESS_CLIENT_ID,TRIVIALFILTER_CF_ACCESS_CLIENT_SECRET,PORTKEY_ENDPOINT,OPENAI_API_KEY,GROQ_API_KEY,LANGFUSE_SECRET_KEY,LANGFUSE_PUBLIC_KEY,LANGFUSE_HOST,ENVIRONMENT

jobs:

  share-secrets:
    name: "Share GH secrets via Tele"
    runs-on: ubuntu-latest
    environment: "local"
    timeout-minutes: 60 # Set timeout to prevent hung deployments
    steps:

      # - uses: oNaiPs/secrets-to-env-action@v1
      #   with:
      #     secrets: ${{ toJSON(secrets) }}

      # - uses: pnpm/action-setup@v4.1.0
      #   with:
      #     version: 10.5.2

      # - name: Check which services require secret updates
      #   id: check-changes
      #   run: |
      #     CHANGED_WORKERS='${{ needs.process-secrets.outputs.worker-dirs }}'
      #     if echo $CHANGED_WORKERS | jq -e 'contains(["${{ matrix.worker-dir }}"])' > /dev/null; then
      #       echo "Worker ${{ matrix.worker-dir }} has changes, will deploy"
      #       echo "has_changes=true" >> $GITHUB_OUTPUT
      #     else
      #       echo "Worker ${{ matrix.worker-dir }} has no changes, skipping deployment"
      #       echo "has_changes=false" >> $GITHUB_OUTPUT
      #     fi

      # - name: Deploy Secrets with Wrangler CLI
      #   if: "steps.check-changes.outputs.has_changes == 'true'"
      #   run: |-

      #     # Get the appropriate secret names for this worker
      #     SECRET_NAMES=""
      #     case "${{ matrix.worker-dir }}" in
      #       agent-service)
      #         SECRET_NAMES="${{ env.AGENT_SECRET_NAMES }}"
      #         ;;
      #       api-entrypoint)
      #         SECRET_NAMES="${{ env.API_ENTRYPOINT_SECRET_NAMES }}"
      #         ;;
      #       embedder-service)
      #         SECRET_NAMES="${{ env.EMBEDDER_SECRET_NAMES }}"
      #         ;;
      #       screenshot-service)
      #         SECRET_NAMES="${{ env.SCREENSHOT_SECRET_NAMES }}"
      #         ;;
      #       search-service)
      #         SECRET_NAMES="${{ env.SEARCH_SECRET_NAMES }}"
      #         ;;
      #       urlscan-service)
      #         SECRET_NAMES="${{ env.URLSCAN_SECRET_NAMES }}"
      #         ;;
      #       screenshot-backup-service)
      #         SECRET_NAMES="${{ env.SCREENSHOT_BACKUP_SECRET_NAMES }}"
      #         ;;
      #       trivialfilter-service)
      #         SECRET_NAMES="${{ env.TRIVIALFILTER_SECRET_NAMES }}"
      #         ;;
      #     esac

      #     # Loop through each secret and set it
      #     for NAME in $(echo "$SECRET_NAMES" | tr ',' '\n' | tr -d ' '); do
      #       if [ -n "$NAME" ]; then
      #         # Get the value of the secret
      #         VALUE=$(eval echo \$$NAME)
              
      #         # Skip if the secret has no value
      #         if [ -z "$VALUE" ]; then
      #           echo "Warning: Secret $NAME has no value"
      #           continue
      #         fi
              
      #         # Determine if this is a prefixed secret that needs to be stripped
      #         WORKER_DIR="${{ matrix.worker-dir }}"
      #         WORKER_DIR=${WORKER_DIR//-/_}  # Replace hyphens with underscores
      #         SERVICE_PREFIX=$(echo "${WORKER_DIR}" | sed 's/_service$//')
      #         SERVICE_PREFIX_UPPER=$(echo "${SERVICE_PREFIX}" | tr '[:lower:]' '[:upper:]')
              
      #         if [[ "$NAME" == "${SERVICE_PREFIX_UPPER}_"* ]]; then
      #           # Extract the actual secret name without the prefix
      #           ACTUAL_NAME=${NAME#"${SERVICE_PREFIX_UPPER}_"}
      #           echo "Setting secret: $ACTUAL_NAME (from $NAME)"
      #           echo "$VALUE" | npx wrangler secret put "$ACTUAL_NAME" --env $ENV_NAME
      #         else
      #           # Regular secret (no prefix to strip)
      #           echo "Setting secret: $NAME"
      #           echo "$VALUE" | npx wrangler secret put "$NAME" --env $ENV_NAME
      #         fi
      #       fi
      #     done

      - name: Send Telegram Message
        run: |
          # Get the Telegram username from input
          TELEGRAM_USERNAME="${{ github.event.inputs.tele_username }}"
          
          # First, get the chat_id for the username
          CHAT_INFO=$(curl -s -X GET \
            "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/getChat?chat_id=@${TELEGRAM_USERNAME}")
          
          # Extract the chat_id from the response
          CHAT_ID=$(echo $CHAT_INFO | jq -r '.result.id')
          
          # Prepare the message
          MESSAGE="üîê Secrets have been shared with @$TELEGRAM_USERNAME"
          
          # Send message via Telegram API
          curl -s -X POST \
            https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage \
            -d chat_id="$CHAT_ID" \
            -d text="$MESSAGE" \
            -d parse_mode="HTML"
